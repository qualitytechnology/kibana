/*
 * Licensed to Elasticsearch B.V. under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch B.V. licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import { PathLike, writeFileSync } from 'fs';
import { OwnershipRule } from './ownership_config';
import { ToolingLog } from '../tooling_log';

type FileList = string[];
type ExcludedFileList = string[];

const appendUtf8 = { flag: 'a', encoding: 'utf8' };

const write = (
  codeOwnersPath: PathLike,
  owner: string,
  files: FileList,
  excludeFiles: ExcludedFileList
) => {
  const writeToFile = writeFileSync.bind(null, codeOwnersPath);
  writeToFile(`\n#${drop(owner)}\n`, appendUtf8);

  for (const file of files) writeToFile(`${file} ${owner}\n`, appendUtf8);

  for (const excluded of excludeFiles) {
    const formatted = `!${excluded}`;
    writeToFile(`${formatted} ${owner}\n`, appendUtf8);
  }
};

export const record = (codeOwnersPath: string, log: ToolingLog, rules: OwnershipRule[]) => {
  writeFileSync(codeOwnersPath, preamble(), { encoding: 'utf8' });

  rules.forEach(({ files, excludeFiles, codeOwner }) => {
    if (codeOwner) write(codeOwnersPath as PathLike, codeOwner, files, excludeFiles);
  });

  log.info(`\n### CODEOWNERS generation complete against: ${codeOwnersPath}`);
};

function drop(x: string) {
  return x.replace(/@/, '').replace(/elastic\//, '');
}

function preamble() {
  return `# GENERATED by @kbn/dev-utils (Do not edit manually)

# GitHub CODEOWNERS definition
# Identify which groups will be pinged by changes to different parts of the codebase.
# For more info, see https://help.github.com/articles/about-codeowners/\n\n`;
}
